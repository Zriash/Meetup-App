{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\avior\\\\Desktop\\\\react-meetupsApp\\\\pages\\\\[meetupId]\\\\index.js\";\nimport Head from 'next/head';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst MeetupDetailsPage = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: [\"Meetup App - \", props.meetupData.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: `View the ${props.meetupData.title} on Meetup App`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetails, {\n      meetupData: props.meetupData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getStaticPaths() {\n  const mongoURL = process.env.DB_URL;\n  const client = await MongoClient.connect(mongoURL); // storing connection to database (mongo atlas) on const client\n\n  const db = client.db(); // storing the db\n\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // find all the meetups from db and extract only id\n\n  client.close();\n  return {\n    fallback: 'blocking',\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const mongoURL = process.env.DB_URL;\n  const client = await MongoClient.connect(mongoURL); // storing connection to database (mongo atlas) on const client\n\n  const db = client.db(); // storing the db\n\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId.toString()\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/avior/Desktop/react-meetupsApp/pages/[meetupId]/index.js"],"names":["Head","MeetupDetails","MongoClient","ObjectId","MeetupDetailsPage","props","meetupData","title","getStaticPaths","mongoURL","process","env","DB_URL","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id","image","address","description"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnC,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,oCAAqBA,KAAK,CAACC,UAAN,CAAiBC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,OAAO,EAAG,YAAWF,KAAK,CAACC,UAAN,CAAiBC,KAAM;AAF9C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,aAAD;AAAe,MAAA,UAAU,EAAEF,KAAK,CAACC;AAAjC;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAYD,CAbD;;AAeA,OAAO,eAAeE,cAAf,GAAgC;AACrC,QAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAA7B;AACA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoBL,QAApB,CAArB,CAFqC,CAEe;;AACpD,QAAMM,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAHqC,CAGb;;AAExB,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CALqC,CAKe;;AAEpD,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CAPqC,CAOmC;;AAExER,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,UADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADJ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMnB,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAA7B;AAEA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoBL,QAApB,CAArB,CAJ4C,CAIQ;;AACpD,QAAMM,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAL4C,CAKpB;;AAExB,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAP4C,CAOQ;;AAEpD,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACrDb,IAAAA,GAAG,EAAEQ,QAAQ,CAACC,QAAT;AADgD,GAA1B,CAA7B;AAIAhB,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV4B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVtB,QAAAA,KAAK,EAAEyB,cAAc,CAACzB,KAFZ;AAGV4B,QAAAA,KAAK,EAAEH,cAAc,CAACG,KAHZ;AAIVC,QAAAA,OAAO,EAAEJ,cAAc,CAACI,OAJd;AAKVC,QAAAA,WAAW,EAAEL,cAAc,CAACK;AALlB;AADP;AADF,GAAP;AAWD;AAED,eAAejC,iBAAf","sourcesContent":["import Head from 'next/head';\r\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\n\r\nconst MeetupDetailsPage = (props) => {\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Meetup App - {props.meetupData.title}</title>\r\n        <meta\r\n          name='description'\r\n          content={`View the ${props.meetupData.title} on Meetup App`}\r\n        ></meta>\r\n      </Head>\r\n      <MeetupDetails meetupData={props.meetupData} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  const mongoURL = process.env.DB_URL;\r\n  const client = await MongoClient.connect(mongoURL); // storing connection to database (mongo atlas) on const client\r\n  const db = client.db(); // storing the db\r\n\r\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); // find all the meetups from db and extract only id\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: 'blocking',\r\n    paths: meetups.map((meetup) => ({\r\n      params: {\r\n        meetupId: meetup._id.toString(),\r\n      },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n  const mongoURL = process.env.DB_URL;\r\n\r\n  const client = await MongoClient.connect(mongoURL); // storing connection to database (mongo atlas) on const client\r\n  const db = client.db(); // storing the db\r\n\r\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: meetupId.toString(),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        image: selectedMeetup.image,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetailsPage;\r\n"]},"metadata":{},"sourceType":"module"}