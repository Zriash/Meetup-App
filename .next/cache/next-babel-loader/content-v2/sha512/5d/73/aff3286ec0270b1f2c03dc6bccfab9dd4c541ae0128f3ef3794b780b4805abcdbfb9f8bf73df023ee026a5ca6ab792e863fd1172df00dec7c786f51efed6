{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\avior\\\\Desktop\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupItem from '../../components/meetups/MeetupItem';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst MeetupDetailsPage = props => {\n  //   return <MeetupDetails meetupData={props.meetupData} />;\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: props.meetupData.title,\n    image: props.meetupData.image,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://Zriash-mgr:WUYvTyAS7qKiH7Je@cluster0.f1ngx.mongodb.net/meetups?retryWrites=true&w=majority'); // storing connection to database (mongo atlas) on const client\n\n  const db = client.db(); // storing the db\n\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // find all the meetups from db and extract only id\n\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => {\n      params: {\n        meetupId: meetup._id.toString();\n      }\n    })\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://Zriash-mgr:WUYvTyAS7qKiH7Je@cluster0.f1ngx.mongodb.net/meetups?retryWrites=true&w=majority'); // storing connection to database (mongo atlas) on const client\n\n  const db = client.db(); // storing the db\n\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/avior/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupItem","MeetupDetails","MongoClient","ObjectId","MeetupDetailsPage","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,qCAAvB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnC;AACA,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAVD;;AAYA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,0GADmB,CAArB,CADqC,CAGlC;;AACH,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAJqC,CAIb;;AAExB,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CANqC,CAMe;;AAEpD,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CARqC,CAQmC;;AAExER,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,IAAY;AAC7BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AACX;AACF,KAJM;AAFF,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,0GADmB,CAArB,CAH4C,CAKzC;;AACH,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAN4C,CAMpB;;AAExB,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAR4C,CAQQ;;AAEpD,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACrDb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,QAAD;AADwC,GAA1B,CAA7B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVrB,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAFZ;AAGVC,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAHZ;AAIVC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAJd;AAKVC,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALlB;AADP;AADF,GAAP;AAWD;AAED,eAAeN,iBAAf","sourcesContent":["import MeetupItem from '../../components/meetups/MeetupItem';\r\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\n\r\nconst MeetupDetailsPage = (props) => {\r\n  //   return <MeetupDetails meetupData={props.meetupData} />;\r\n  return (\r\n    <MeetupDetails\r\n      title={props.meetupData.title}\r\n      image={props.meetupData.image}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://Zriash-mgr:WUYvTyAS7qKiH7Je@cluster0.f1ngx.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  ); // storing connection to database (mongo atlas) on const client\r\n  const db = client.db(); // storing the db\r\n\r\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); // find all the meetups from db and extract only id\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => {\r\n      params: {\r\n        meetupId: meetup._id.toString();\r\n      }\r\n    }),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://Zriash-mgr:WUYvTyAS7qKiH7Je@cluster0.f1ngx.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  ); // storing connection to database (mongo atlas) on const client\r\n  const db = client.db(); // storing the db\r\n\r\n  const meetupsCollection = db.collection('meetups'); // storing the collection of choice on const meetupsCollection\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        image: selectedMeetup.image,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetailsPage;\r\n"]},"metadata":{},"sourceType":"module"}